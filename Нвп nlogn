int n;
vector<int> findNVP(vector<int> a)
{
	vector<int> d(n+1);
	vector<int> pos(n+1);
	vector<int> prev(n);
	int length = 0;

	pos[0] = -1;
	d[0] = -INF;

	for (int i = 1; i <= n; i++)
		d[i] = INF;

	for (int i = 0; i < n; i++)
	{
		int j = upper_bound(d.begin(), d.end(), a[i]) - d.begin();

		if (d[j - 1] < a[i] && a[i] < d[j])
		{
			d[j] = a[i];
			pos[j] = i;
			prev[i] = pos[j - 1];
			length = max(length, j);
		}
	}
	
	//восстановление ответа
	vector<int> answer;
	int p = pos[length];

	while (p != -1)
	{
		answer.pb(a[p]);
		p = prev[p];
	}

	reverse(all(answer));
	return answer;
}
